
from config import ver
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from data import db
import datetime
from rich import print
from rich.console import Console
import random
console = Console()

def russif(drank):
    if drank == "tea":
        return "–ß–∞—è"
    elif drank == "coffee":
        return "–ö–æ—Ñ–µ"
    elif drank == "champagne":
        return "–®–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ"
    elif drank == "beer":
        return "–ü–∏–≤–∞"
    elif drank == "juice":
        return "–°–æ–∫–∞"
    elif drank == "wine":
        return "–í–∏–Ω–∞"
    else:
        return False


router = Router()
db = db.Db('./data/main.db')


@router.message(F.text == "/start")
async def start(message : Message):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –¥—Ä—É–≥, —á—Ç–æ —Ö–æ—á–µ—à—å –≤—ã–ø–∏—Ç—å?üßê\n<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ - /h</b>")

@router.message(Command(commands=['tea', '—á–∞–π']))
async def tea(message : Message):
    date = datetime.datetime.now()
    check = db.time_check(message.from_user.id, message.from_user.username, message.from_user.full_name, date, 'tea')
    
    if check[0]:
        lit = round(random.uniform(0.3, 6),2)
        res = db.drank(message.from_user.id, message.from_user.username, message.from_user.full_name, lit, date, 'tea')
        await message.answer(f"{message.from_user.first_name} –≤—ã–ø–∏–ª <b>{lit} –ª.</b> —á–∞—è\n–í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ <b>{res}</b> –ª." )
    else: 
        await message.answer(f"–ß–∞–π–Ω–∏–∫ –µ—â—ë –Ω–µ –≤—Å–∫–∏–ø–µ–ªü´ñ\n–ü–æ–¥–æ–∂–¥–∏ <b>{check[1]}</b> –º–∏–Ω.")


@router.message(Command(commands=['coffee', 'coffe', 'cofe', '–∫–æ—Ñ–µ']))
async def coffee(message : Message):
    date = datetime.datetime.now()
    check = db.time_check(message.from_user.id, message.from_user.username, message.from_user.full_name, date, 'coffee')

    if check[0]:
        lit = round(random.uniform(0.3, 6),2)
        res = db.drank(message.from_user.id, message.from_user.username, message.from_user.full_name, lit, date, 'coffee')
        await message.answer(f"{message.from_user.first_name} –≤—ã–ø–∏–ª <b>{lit} –ª.</b> –∫–æ—Ñ–µ\n–í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ <b>{res}</b> –ª." )
    else: 
        await message.answer(f"–ö–æ—Ñ–µ –µ—â—ë –Ω–µ —Å–≤–∞—Ä–∏–ª—Å—èüòí\n–ü–æ–¥–æ–∂–¥–∏ <b>{check[1]}</b> –º–∏–Ω.")


@router.message(Command(commands=['juice', 'juc', '—Å–æ–∫']))
async def juice(message : Message):
    date = datetime.datetime.now()
    check = db.time_check(message.from_user.id, message.from_user.username, message.from_user.full_name, date, 'juice')
    
    if check[0]:
        lit = round(random.uniform(0.3, 6),2)
        res = db.drank(message.from_user.id, message.from_user.username, message.from_user.full_name, lit, date, 'juice')
        await message.answer(f"{message.from_user.first_name} –≤—ã–ø–∏–ª <b>{lit} –ª.</b> —Å–æ–∫–∞\n–í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ <b>{res}</b> –ª." )
    else: 
        await message.answer(f"–°–æ–∫ –µ—â—ë –Ω–µ –ø—Ä–∏–≤–µ–∑–ª–∏üßÉ\n–ü–æ–¥–æ–∂–¥–∏ <b>{check[1]}</b> –º–∏–Ω.")

@router.message(Command(commands=['beer', '–ø–∏–≤–æ', '–ø–∏–≤–∞—Å', '–ø–∏–≤–∞—Å–∏–∫']))
async def beer(message : Message):
    date = datetime.datetime.now()
    check = db.time_check(message.from_user.id, message.from_user.username, message.from_user.full_name, date, 'beer')
    
    if check[0]:
        lit = round(random.uniform(0.3, 6),2)
        res = db.drank(message.from_user.id, message.from_user.username, message.from_user.full_name, lit, date, 'beer')
        await message.answer(f"{message.from_user.first_name} –≤—ã–ø–∏–ª <b>{lit} –ª.</b> –ø–∏–≤–∞\n–í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ <b>{res}</b> –ª." )
    else: 
        await message.answer(f"üìõ–ü–∏–≤–æ –Ω–µ –ø–æ –∞–∫—Ü–∏–∏!üìõ\n–ü–æ–¥–æ–∂–¥–∏ <b>{check[1]}</b> –º–∏–Ω.")

@router.message(Command(commands=['wine', '–≤–∏–Ω–æ']))
async def wine(message : Message):
    date = datetime.datetime.now()
    check = db.time_check(message.from_user.id, message.from_user.username, message.from_user.full_name, date, 'wine')
    
    if check[0]:
        lit = round(random.uniform(0.3, 6),2)
        res = db.drank(message.from_user.id, message.from_user.username, message.from_user.full_name, lit, date, 'wine')
        await message.answer(f"{message.from_user.first_name} –≤—ã–ø–∏–ª <b>{lit} –ª.</b> –≤–∏–Ω–∞\n–í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ <b>{res}</b> –ª." )
    else: 
        await message.answer(f"–í—Ä–µ–º—è –¥–ª—è –≤–∏–Ω–∞ –µ—â–µ –Ω–µ –ø–æ–¥–æ—à–ª–æü•¥üç∑\n–ü–æ–¥–æ–∂–¥–∏ <b>{check[1]}</b> –º–∏–Ω.")

@router.message(Command(commands=['champagne', 'cham', 'champ', '—à–∞–º–ø–∞–Ω—Å–∫–æ–µ', '—à–∞–º–ø—É–Ω—å', '—à–∞–º']))
async def champagne(message : Message):
    date = datetime.datetime.now()
    check = db.time_check(message.from_user.id, message.from_user.username, message.from_user.full_name, date, 'champagne')
        
    if check[0]:
        lit = round(random.uniform(0.3, 6),2)
        res = db.drank(message.from_user.id, message.from_user.username, message.from_user.full_name, lit, date, 'champagne')
        await message.answer(f"{message.from_user.first_name} –≤—ã–ø–∏–ª <b>{lit} –ª.</b> —à–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ\n–í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ <b>{res}</b> –ª." )
    else: 
        await message.answer(f"–í—Ä–µ–º—è –¥–ª—è —à–∞–º–ø—É–Ω—è –µ—â–µ –Ω–µ –ø–æ–¥–æ—à–ª–æü•¥üçæ\n–ü–æ–¥–æ–∂–¥–∏ <b>{check[1]}</b> –º–∏–Ω.")

    
@router.message(Command(commands=["top"]))
async def top(message : Message, command: CommandObject):
    scan = russif(command.args)
    
    if scan == False:
        await message.answer("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ")
    else: 
        res = db.top(command.args)
        await message.answer(f"–¢–æ–ø {scan}\n{res}")


@router.message(Command(commands=["v", "ver", "version"]))
async def help(message : Message):

    await message.answer(f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ : <code>{ver}</code>")
